from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from keyboards.payment_keyboard import get_payment_methods_keyboard
from payments.admin_panel import ADMIN_IDS
from payments.data_storage import pending_users, waiting_for_payment
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

fake_payment_router = Router()


# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_admin_confirmation_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])


@fake_payment_router.callback_query(F.data == "month")
async def handle_fake_payment(call: CallbackQuery):
    await call.message.edit_text(
        "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ *100 –ì–ë* –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ:",
        reply_markup=get_payment_methods_keyboard()
    )


@fake_payment_router.callback_query(F.data == "pay_sbp")
async def pay_sbp(call: CallbackQuery):
    await call.message.answer(
        "üì≤ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 200‚ÇΩ –ø–æ –°–ë–ü –Ω–∞ –Ω–æ–º–µ—Ä:\n\n<b>+7 999 111 25 25</b>\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª"
    )


@fake_payment_router.callback_query(F.data == "pay_card")
async def pay_card(call: CallbackQuery):
    await call.message.answer(
        "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 200‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n\n<b>2200 4528 3654 2122</b>\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª"
    )


@fake_payment_router.callback_query(F.data == "confirm_payment")
async def confirm_payment(call: CallbackQuery):
    pending_users.add(call.from_user.id)
    await call.message.answer("‚åõ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@fake_payment_router.message(F.photo)
async def handle_payment_screenshot(message: Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    user_id = message.from_user.id
    file_id = message.photo[-1].file_id
    pending_users.add(user_id)
    waiting_for_payment[user_id] = file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
    waiting_for_payment[user_id] = file_id

    await message.answer("‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        await message.bot.send_photo(
            admin_id,
            file_id,
            caption=f"üì∏ –°–∫—Ä–∏–Ω –æ—Ç <b>{message.from_user.full_name}</b> (ID: <code>{user_id}</code>)",
            reply_markup=get_admin_confirmation_keyboard(user_id)
        )
