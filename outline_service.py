import os
import json
import requests
from aiogram.types import Message
from urllib3.exceptions import InsecureRequestWarning
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import OutlineKey
from key import Key
from dotenv import find_dotenv, load_dotenv

from keyboards.inline_keyboard import main_keyboard

load_dotenv(find_dotenv())

api_url = os.getenv('API_URL')
session = requests.Session()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def create_key_decorator(limit=None):
    def decorator(func):
        async def wrapper(chat, key_name, db_session: AsyncSession):
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
            url = f"{api_url}/access-keys"
            error_message = ''
            r = requests.post(url, verify=False)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á

            if r.status_code >= 400:
                return f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {r.status_code}"

            response = json.loads(r.text)
            key_id = response.get('id')
            access_url = response.get('accessUrl')

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
            rename_url = f"{api_url}/access-keys/{key_id}/name"
            r = requests.put(rename_url, data={'name': key_name}, verify=False)

            if r.status_code >= 400:
                error_message = f"–ö–ª—é—á —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å. –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {r.status_code}"

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
            if limit is not None:
                add_data_limit(key_id, limit)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                outline_key = OutlineKey(
                    key_id=key_id,
                    access_url=access_url,
                    user_name=key_name,
                    chat_id=chat.id
                )
                db_session.add(outline_key)
                await db_session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î

            return Key(key_id, key_name, access_url, error_message)

        return wrapper

    return decorator


def add_data_limit(key_id, limit_bytes):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –≤ –∫–ª—é—á–µ"""
    data = {"limit": {"bytes": limit_bytes}}
    response = session.put(f"{api_url}/access-keys/{key_id}/data-limit", json=data, verify=False)
    return response.status_code == 204


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
@create_key_decorator(limit=1024 ** 3 * 9.5)  # –õ–∏–º–∏—Ç 10 –ì–ë
def create_new_key_trial(chat, key_name, db_session: AsyncSession):
    pass


@create_key_decorator(limit=1024 ** 3 * 93.5)  # –õ–∏–º–∏—Ç 100 –ì–ë
def create_new_key_100(chat, key_name, db_session: AsyncSession):
    pass


@create_key_decorator(limit=1024 ** 3 * 280)  # –õ–∏–º–∏—Ç 300 –ì–ë
def create_new_key_300(chat, key_name, db_session: AsyncSession):
    pass


@create_key_decorator(limit=1024 ** 3 * 559)  # –õ–∏–º–∏—Ç 600 –ì–ë
def create_new_key_600(chat, key_name, db_session: AsyncSession):
    pass


@create_key_decorator()  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
def create_new_key_no_limit(chat, key_name, db_session: AsyncSession):
    pass


async def handle_invite(message: Message):
    bot_username = "tadivpn_bot"  # –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    user_id = message.from_user.id
    invite_url = f"https://t.me/{bot_username}?start={user_id}"

    await message.answer(
        f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n\n{invite_url}",
        reply_markup=main_keyboard()
    )


